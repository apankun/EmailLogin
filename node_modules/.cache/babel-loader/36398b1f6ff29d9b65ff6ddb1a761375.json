{"remainingRequest":"E:\\StockForecast\\Guesssssss\\node_modules\\babel-loader\\lib\\index.js!E:\\StockForecast\\Guesssssss\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\StockForecast\\Guesssssss\\src\\api\\http.js","dependencies":[{"path":"E:\\StockForecast\\Guesssssss\\src\\api\\http.js","mtime":1559279809163},{"path":"E:\\StockForecast\\Guesssssss\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\StockForecast\\Guesssssss\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\StockForecast\\Guesssssss\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"E:\\\\StockForecast\\\\Guesssssss\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n/**\r\n * axios封装\r\n * 请求拦截、响应拦截、错误统一处理\r\n */\nimport axios from 'axios';\nimport baseUrl from './url';\nimport router from '../router';\nimport store from '../store/index';\nimport { Message } from 'element-ui';\n/** \r\n * 提示函数 \r\n * 禁止点击蒙层、显示一秒后关闭\r\n */\n\nvar tip = function tip(msg) {\n  Message({\n    showClose: true,\n    message: msg,\n    type: 'error',\n    duration: 2000\n  });\n};\n\nvar toLogin = function toLogin() {\n  router.replace({\n    path: '/login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n};\n/*******创建axios实例********/\n\n\nvar instance = axios.create({\n  baseURL: baseUrl,\n  timeout: 5000,\n  withCredentials: false,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  transformRequest: [function (data) {\n    return data;\n  }],\n  transformResponse: [function (data) {\n    return data;\n  }],\n  auth: {},\n  responseType: 'json',\n  maxContentLength: 5000,\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300; // default\n  } // showMessage:false\n\n});\n\nvar errorHandle = function errorHandle(status, other) {\n  // 状态码判断\n  switch (status) {\n    // 401: 未登录状态，跳转登录页\n    case 401:\n      toLogin();\n      break;\n    // 403 token过期\n    // 清除token并跳转登录页\n\n    case 403:\n      tip('登录过期，请重新登录');\n      localStorage.removeItem('token');\n      store.dispatch('UserLogout');\n      setTimeout(function () {\n        toLogin();\n      }, 1000);\n      break;\n    // 404请求不存在\n\n    case 404:\n      tip('请求的资源不存在');\n      break;\n\n    default:\n      console.log(other);\n  }\n}; // request拦截器\n\n\ninstance.interceptors.request.use(function (config) {\n  var token = localStorage.getItem('token');\n  token && (config.headers['authorization'] = \"token \".concat(localStorage.getItem('token')));\n  return config;\n}, function (error) {\n  // 出错\n  console.log(error);\n\n  _Promise.reject(error);\n}); // 拦截响应，遇到token不合法则报错\n\ninstance.interceptors.response.use( // res => {\n//     // console.log(res)\n//     res.status == 200 ? Promise.resolve(res) : Promise.reject(res)\n//         // if (response.data.code == 401) {\n//         //     tip('token失效')\n//         //     router.push('/login')\n//         //     store.dispatch('UserLogout')\n//         // }\n//         // return response;\n// },\n// 请求成功\nfunction (res) {\n  return res.status === 200 ? _Promise.resolve(res) : _Promise.reject(res);\n}, //请求失败\nfunction (error) {\n  console.log(error);\n  var response = error.response;\n\n  if (response) {\n    //请求已发出，但不在2xx的范围\n    errorHandle(response.status, response.data.message);\n    return _Promise.reject(response);\n  }\n});\nexport default instance;",{"version":3,"sources":["E:\\StockForecast\\Guesssssss\\src\\api\\http.js"],"names":["axios","baseUrl","router","store","Message","tip","msg","showClose","message","type","duration","toLogin","replace","path","query","redirect","currentRoute","fullPath","instance","create","baseURL","timeout","withCredentials","headers","transformRequest","data","transformResponse","auth","responseType","maxContentLength","validateStatus","status","errorHandle","other","localStorage","removeItem","dispatch","setTimeout","console","log","interceptors","request","use","config","token","getItem","error","reject","response","res","resolve"],"mappings":"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","sourcesContent":["/**\r\n * axios封装\r\n * 请求拦截、响应拦截、错误统一处理\r\n */\r\nimport axios from 'axios';\r\nimport baseUrl from './url';\r\nimport router from '../router'\r\nimport store from '../store/index'\r\nimport { Message } from 'element-ui'\r\n/** \r\n * 提示函数 \r\n * 禁止点击蒙层、显示一秒后关闭\r\n */\r\nconst tip = msg => {\r\n    Message({\r\n        showClose: true,\r\n        message: msg,\r\n        type: 'error',\r\n        duration: 2000\r\n    })\r\n}\r\n\r\nconst toLogin = () => {\r\n    router.replace({\r\n        path: '/login',\r\n        query: {\r\n            redirect: router.currentRoute.fullPath\r\n        }\r\n    });\r\n}\r\n\r\n/*******创建axios实例********/\r\nlet instance = axios.create({\r\n    baseURL: baseUrl,\r\n    timeout: 5000,\r\n    withCredentials: false,\r\n    headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n    },\r\n    transformRequest: [function(data) {\r\n        return data;\r\n    }],\r\n    transformResponse: [function(data) {\r\n        return data\r\n    }],\r\n    auth: {},\r\n    responseType: 'json',\r\n    maxContentLength: 5000,\r\n    validateStatus: function(status) {\r\n        return status >= 200 && status < 300; // default\r\n    },\r\n    // showMessage:false\r\n})\r\n\r\n\r\nconst errorHandle = (status, other) => {\r\n    // 状态码判断\r\n    switch (status) {\r\n        // 401: 未登录状态，跳转登录页\r\n        case 401:\r\n            toLogin();\r\n            break;\r\n            // 403 token过期\r\n            // 清除token并跳转登录页\r\n        case 403:\r\n            tip('登录过期，请重新登录');\r\n            localStorage.removeItem('token');\r\n            store.dispatch('UserLogout')\r\n            setTimeout(() => {\r\n                toLogin();\r\n            }, 1000);\r\n            break;\r\n            // 404请求不存在\r\n        case 404:\r\n            tip('请求的资源不存在');\r\n            break;\r\n        default:\r\n            console.log(other);\r\n    }\r\n}\r\n\r\n\r\n// request拦截器\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        const token = localStorage.getItem('token')\r\n        token && (config.headers['authorization'] = `token ${localStorage.getItem('token')}`)\r\n        return config\r\n    },\r\n    error => {\r\n        // 出错\r\n        console.log(error)\r\n        Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 拦截响应，遇到token不合法则报错\r\ninstance.interceptors.response.use(\r\n    // res => {\r\n    //     // console.log(res)\r\n    //     res.status == 200 ? Promise.resolve(res) : Promise.reject(res)\r\n    //         // if (response.data.code == 401) {\r\n    //         //     tip('token失效')\r\n    //         //     router.push('/login')\r\n    //         //     store.dispatch('UserLogout')\r\n    //         // }\r\n    //         // return response;\r\n    // },\r\n    // 请求成功\r\n    res => res.status === 200 ? Promise.resolve(res) : Promise.reject(res),\r\n    //请求失败\r\n    error => {\r\n        console.log(error)\r\n        const { response } = error\r\n        if (response) {\r\n            //请求已发出，但不在2xx的范围\r\n            errorHandle(response.status, response.data.message)\r\n            return Promise.reject(response);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nexport default instance;"]}]}